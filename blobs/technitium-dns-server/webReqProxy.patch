diff --git a/DnsServerCore.ApplicationCommon/IDnsServer.cs b/DnsServerCore.ApplicationCommon/IDnsServer.cs
index 6da89b49..92332ad6 100644
--- a/DnsServerCore.ApplicationCommon/IDnsServer.cs
+++ b/DnsServerCore.ApplicationCommon/IDnsServer.cs
@@ -86,10 +86,15 @@ namespace DnsServerCore.ApplicationCommon
         IDnsCache DnsCache { get; }
 
         /// <summary>
-        /// The proxy server setting on the DNS server to be used when required to make any outbound network connection.
+        /// The proxy server setting on the DNS server to be used when making outbound DNS request.
         /// </summary>
         NetProxy Proxy { get; }
 
+        /// <summary>
+        /// The proxy server setting on the DNS server to be used when making any outbound network request other than DNS request.
+        /// </summary>
+        NetProxy WebReqProxy { get; }
+
         /// <summary>
         /// Tells if the DNS server prefers using IPv6 as per the settings.
         /// </summary>
diff --git a/DnsServerCore/Dns/Applications/DnsServerInternal.cs b/DnsServerCore/Dns/Applications/DnsServerInternal.cs
index dd6f5682..dc0da11b 100644
--- a/DnsServerCore/Dns/Applications/DnsServerInternal.cs
+++ b/DnsServerCore/Dns/Applications/DnsServerInternal.cs
@@ -107,6 +107,9 @@ namespace DnsServerCore.Dns.Applications
         public NetProxy Proxy
         { get { return _dnsServer.Proxy; } }
 
+        public NetProxy WebReqProxy
+        { get { return _dnsServer.WebReqProxy; } }
+
         public bool PreferIPv6
         { get { return _dnsServer.PreferIPv6; } }
 
diff --git a/DnsServerCore/Dns/DnsServer.cs b/DnsServerCore/Dns/DnsServer.cs
index 1f41c05c..128c086f 100644
--- a/DnsServerCore/Dns/DnsServer.cs
+++ b/DnsServerCore/Dns/DnsServer.cs
@@ -208,6 +208,7 @@ namespace DnsServerCore.Dns
         IReadOnlyCollection<DnsAAAARecordData> _customBlockingAAAARecords = Array.Empty<DnsAAAARecordData>();
 
         NetProxy _proxy;
+        NetProxy _webReqProxy;
         IReadOnlyList<NameServerAddress> _forwarders;
         bool _concurrentForwarding = true;
         int _forwarderRetries = 3;
@@ -6104,6 +6105,12 @@ namespace DnsServerCore.Dns
             set { _proxy = value; }
         }
 
+        public NetProxy WebReqProxy
+        {
+            get { return _webReqProxy; }
+            set { _webReqProxy = value; }
+        }
+
         public IReadOnlyList<NameServerAddress> Forwarders
         {
             get { return _forwarders; }
diff --git a/DnsServerCore/Dns/ZoneManagers/BlockListZoneManager.cs b/DnsServerCore/Dns/ZoneManagers/BlockListZoneManager.cs
index 234eb8ca..df59f8cf 100644
--- a/DnsServerCore/Dns/ZoneManagers/BlockListZoneManager.cs
+++ b/DnsServerCore/Dns/ZoneManagers/BlockListZoneManager.cs
@@ -415,8 +415,8 @@ namespace DnsServerCore.Dns.ZoneManagers
                     else
                     {
                         SocketsHttpHandler handler = new SocketsHttpHandler();
-                        handler.Proxy = _dnsServer.Proxy;
-                        handler.UseProxy = _dnsServer.Proxy is not null;
+                        handler.Proxy = _dnsServer.WebReqProxy;
+                        handler.UseProxy = _dnsServer.WebReqProxy is not null;
                         handler.AutomaticDecompression = DecompressionMethods.All;
 
                         using (HttpClient http = new HttpClient(new HttpClientNetworkHandler(handler, _dnsServer.PreferIPv6 ? HttpClientNetworkType.PreferIPv6 : HttpClientNetworkType.Default, _dnsServer)))
diff --git a/DnsServerCore/DnsWebService.cs b/DnsServerCore/DnsWebService.cs
index 45662002..4ffc9e73 100644
--- a/DnsServerCore/DnsWebService.cs
+++ b/DnsServerCore/DnsWebService.cs
@@ -1283,7 +1283,7 @@ namespace DnsServerCore
 
             int version = bR.ReadByte();
 
-            if ((version >= 28) && (version <= 40))
+            if ((version >= 28) && (version <= 41))
             {
                 ReadConfigFrom(bR, version);
             }
@@ -1861,6 +1861,38 @@ namespace DnsServerCore
                     _dnsServer.Proxy = null;
                 }
 
+                if (version >= 41)
+                {
+                    NetProxyType webReqProxyType = (NetProxyType)bR.ReadByte();
+                    if (webReqProxyType != NetProxyType.None)
+                    {
+                        string address = bR.ReadShortString();
+                        int port = bR.ReadInt32();
+                        NetworkCredential credential = null;
+
+                        if (bR.ReadBoolean()) //credential set
+                            credential = new NetworkCredential(bR.ReadShortString(), bR.ReadShortString());
+
+                        _dnsServer.WebReqProxy = NetProxy.CreateProxy(webReqProxyType, address, port, credential);
+
+                        int count = bR.ReadByte();
+                        List<NetProxyBypassItem> bypassList = new List<NetProxyBypassItem>(count);
+
+                        for (int i = 0; i < count; i++)
+                            bypassList.Add(new NetProxyBypassItem(bR.ReadShortString()));
+
+                        _dnsServer.WebReqProxy.BypassList = bypassList;
+                    }
+                    else
+                    {
+                        _dnsServer.WebReqProxy = null;
+                    }
+                }
+                else
+                {
+                    _dnsServer.WebReqProxy = null;
+                }
+
                 {
                     int count = bR.ReadByte();
                     if (count > 0)
@@ -2539,7 +2571,7 @@ namespace DnsServerCore
         private void WriteConfigTo(BinaryWriter bW)
         {
             bW.Write(Encoding.ASCII.GetBytes("DS")); //format
-            bW.Write((byte)40); //version
+            bW.Write((byte)41); //version
 
             //web service
             {
@@ -2790,6 +2822,38 @@ namespace DnsServerCore
                     }
                 }
 
+                if (_dnsServer.WebReqProxy == null)
+                {
+                    bW.Write((byte)NetProxyType.None);
+                }
+                else
+                {
+                    bW.Write((byte)_dnsServer.WebReqProxy.Type);
+                    bW.WriteShortString(_dnsServer.WebReqProxy.Address);
+                    bW.Write(_dnsServer.WebReqProxy.Port);
+
+                    NetworkCredential credential = _dnsServer.WebReqProxy.Credential;
+
+                    if (credential == null)
+                    {
+                        bW.Write(false);
+                    }
+                    else
+                    {
+                        bW.Write(true);
+                        bW.WriteShortString(credential.UserName);
+                        bW.WriteShortString(credential.Password);
+                    }
+
+                    //bypass list
+                    {
+                        bW.Write(Convert.ToByte(_dnsServer.WebReqProxy.BypassList.Count));
+
+                        foreach (NetProxyBypassItem item in _dnsServer.WebReqProxy.BypassList)
+                            bW.WriteShortString(item.Value);
+                    }
+                }
+
                 if (_dnsServer.Forwarders == null)
                 {
                     bW.Write((byte)0);
diff --git a/DnsServerCore/WebServiceApi.cs b/DnsServerCore/WebServiceApi.cs
index ea36c8b8..e3dde82e 100644
--- a/DnsServerCore/WebServiceApi.cs
+++ b/DnsServerCore/WebServiceApi.cs
@@ -73,8 +73,8 @@ namespace DnsServerCore
                 if ((_checkForUpdateJsonData is null) || (DateTime.UtcNow > _checkForUpdateJsonDataUpdatedOn.AddSeconds(CHECK_FOR_UPDATE_JSON_DATA_CACHE_TIME_SECONDS)))
                 {
                     SocketsHttpHandler handler = new SocketsHttpHandler();
-                    handler.Proxy = _dnsWebService._dnsServer.Proxy;
-                    handler.UseProxy = _dnsWebService._dnsServer.Proxy is not null;
+                    handler.Proxy = _dnsWebService._dnsServer.WebReqProxy;
+                    handler.UseProxy = _dnsWebService._dnsServer.WebReqProxy is not null;
                     handler.AutomaticDecompression = DecompressionMethods.All;
 
                     using (HttpClient http = new HttpClient(new HttpClientNetworkHandler(handler, _dnsWebService._dnsServer.PreferIPv6 ? HttpClientNetworkType.PreferIPv6 : HttpClientNetworkType.Default, _dnsWebService._dnsServer)))
diff --git a/DnsServerCore/WebServiceAppsApi.cs b/DnsServerCore/WebServiceAppsApi.cs
index 4ab6a2a5..2506a72d 100644
--- a/DnsServerCore/WebServiceAppsApi.cs
+++ b/DnsServerCore/WebServiceAppsApi.cs
@@ -170,8 +170,8 @@ namespace DnsServerCore
                 if ((_storeAppsJsonData is null) || (DateTime.UtcNow > _storeAppsJsonDataUpdatedOn.AddSeconds(STORE_APPS_JSON_DATA_CACHE_TIME_SECONDS)))
                 {
                     SocketsHttpHandler handler = new SocketsHttpHandler();
-                    handler.Proxy = _dnsWebService._dnsServer.Proxy;
-                    handler.UseProxy = _dnsWebService._dnsServer.Proxy is not null;
+                    handler.Proxy = _dnsWebService._dnsServer.WebReqProxy;
+                    handler.UseProxy = _dnsWebService._dnsServer.WebReqProxy is not null;
                     handler.AutomaticDecompression = DecompressionMethods.All;
 
                     HttpClientNetworkHandler networkHandler = new HttpClientNetworkHandler(handler, _dnsWebService._dnsServer.PreferIPv6 ? HttpClientNetworkType.PreferIPv6 : HttpClientNetworkType.Default, _dnsWebService._dnsServer);
@@ -198,8 +198,8 @@ namespace DnsServerCore
                     {
                         //download to temp file
                         SocketsHttpHandler handler = new SocketsHttpHandler();
-                        handler.Proxy = _dnsWebService._dnsServer.Proxy;
-                        handler.UseProxy = _dnsWebService._dnsServer.Proxy is not null;
+                        handler.Proxy = _dnsWebService._dnsServer.WebReqProxy;
+                        handler.UseProxy = _dnsWebService._dnsServer.WebReqProxy is not null;
                         handler.AutomaticDecompression = DecompressionMethods.All;
 
                         HttpClientNetworkHandler networkHandler = new HttpClientNetworkHandler(handler, _dnsWebService._dnsServer.PreferIPv6 ? HttpClientNetworkType.PreferIPv6 : HttpClientNetworkType.Default, _dnsWebService._dnsServer);
@@ -480,8 +480,8 @@ namespace DnsServerCore
                     {
                         //download to temp file
                         SocketsHttpHandler handler = new SocketsHttpHandler();
-                        handler.Proxy = _dnsWebService._dnsServer.Proxy;
-                        handler.UseProxy = _dnsWebService._dnsServer.Proxy is not null;
+                        handler.Proxy = _dnsWebService._dnsServer.WebReqProxy;
+                        handler.UseProxy = _dnsWebService._dnsServer.WebReqProxy is not null;
                         handler.AutomaticDecompression = DecompressionMethods.All;
 
                         using (HttpClient http = new HttpClient(new HttpClientNetworkHandler(handler, _dnsWebService._dnsServer.PreferIPv6 ? HttpClientNetworkType.PreferIPv6 : HttpClientNetworkType.Default, _dnsWebService._dnsServer)))
diff --git a/DnsServerCore/WebServiceSettingsApi.cs b/DnsServerCore/WebServiceSettingsApi.cs
index 53b0f63c..f7045cb0 100644
--- a/DnsServerCore/WebServiceSettingsApi.cs
+++ b/DnsServerCore/WebServiceSettingsApi.cs
@@ -498,6 +498,39 @@ namespace DnsServerCore
                     jsonWriter.WriteEndObject();
                 }
 
+                jsonWriter.WritePropertyName("webReqProxy");
+                if (_dnsWebService._dnsServer.WebReqProxy == null)
+                {
+                    jsonWriter.WriteNullValue();
+                }
+                else
+                {
+                    jsonWriter.WriteStartObject();
+
+                    NetProxy proxy = _dnsWebService._dnsServer.WebReqProxy;
+
+                    jsonWriter.WriteString("type", proxy.Type.ToString());
+                    jsonWriter.WriteString("address", proxy.Address);
+                    jsonWriter.WriteNumber("port", proxy.Port);
+
+                    NetworkCredential credential = proxy.Credential;
+                    if (credential != null)
+                    {
+                        jsonWriter.WriteString("username", credential.UserName);
+                        jsonWriter.WriteString("password", credential.Password);
+                    }
+
+                    jsonWriter.WritePropertyName("bypass");
+                    jsonWriter.WriteStartArray();
+
+                    foreach (NetProxyBypassItem item in proxy.BypassList)
+                        jsonWriter.WriteStringValue(item.Value);
+
+                    jsonWriter.WriteEndArray();
+
+                    jsonWriter.WriteEndObject();
+                }
+
                 jsonWriter.WritePropertyName("forwarders");
 
                 DnsTransportProtocol forwarderProtocol = DnsTransportProtocol.Udp;
@@ -1343,6 +1376,35 @@ namespace DnsServerCore
                         }
                     }
 
+                    if (request.TryGetQueryOrFormEnum("webReqProxyType", out NetProxyType webReqProxyType))
+                    {
+                        if (webReqProxyType == NetProxyType.None)
+                        {
+                            _dnsWebService._dnsServer.WebReqProxy = null;
+                        }
+                        else
+                        {
+                            NetworkCredential credential = null;
+
+                            if (request.TryGetQueryOrForm("webReqProxyUsername", out string webReqProxyUsername))
+                            {
+                                if (webReqProxyUsername.Length > 255)
+                                    throw new ArgumentException("Web request proxy username length cannot exceed 255 characters.", "webReqProxyUsername");
+
+                                string webReqProxyPassword = request.QueryOrForm("webReqProxyPassword");
+                                if (webReqProxyPassword?.Length > 255)
+                                    throw new ArgumentException("Web request proxy password length cannot exceed 255 characters.", "webReqProxyPassword");
+
+                                credential = new NetworkCredential(webReqProxyUsername, webReqProxyPassword);
+                            }
+
+                            _dnsWebService._dnsServer.WebReqProxy = NetProxy.CreateProxy(webReqProxyType, request.QueryOrForm("webReqProxyAddress"), int.Parse(request.QueryOrForm("webReqProxyPort")), credential);
+
+                            if (request.TryGetQueryOrFormArray("webReqProxyBypass", delegate (string value) { return new NetProxyBypassItem(value); }, out NetProxyBypassItem[] webReqProxyBypass))
+                                _dnsWebService._dnsServer.WebReqProxy.BypassList = webReqProxyBypass;
+                        }
+                    }
+
                     if (request.TryGetQueryOrFormArray("forwarders", NameServerAddress.Parse, out NameServerAddress[] forwarders))
                     {
                         if ((forwarders is null) || (forwarders.Length == 0))
diff --git a/DnsServerCore/www/index.html b/DnsServerCore/www/index.html
index 15a22857..81d6b77b 100644
--- a/DnsServerCore/www/index.html
+++ b/DnsServerCore/www/index.html
@@ -1983,7 +1983,7 @@
                                                 <div id="settingsTabPaneProxyForwarders" role="tabpanel" class="tab-pane">
                                                     <div class="well well-sm form-horizontal">
                                                         <div class="form-group">
-                                                            <label class="col-sm-3 control-label">Network Proxy</label>
+                                                            <label class="col-sm-3 control-label">DNS query Proxy</label>
                                                             <div class="col-sm-6">
                                                                 <div class="radio">
                                                                     <label>
@@ -2042,7 +2042,71 @@
                                                             <div class="col-sm-offset-3 col-sm-8" style="padding-top: 5px;">Enter IP addresses, network addresses or domain names to never proxy.</div>
                                                         </div>
 
-                                                        <div style="margin-top: 10px;">Note! When proxy server is configured, DNS Server will use it for all outbound network requests.</div>
+                                                        <div style="margin-top: 10px;">Note! This proxy is used for DNS queries, both recursion or forwarded.</div>
+                                                    </div>
+
+                                                    <div class="well well-sm form-horizontal">
+                                                        <div class="form-group">
+                                                            <label class="col-sm-3 control-label">Web Request Proxy</label>
+                                                            <div class="col-sm-6">
+                                                                <div class="radio">
+                                                                    <label>
+                                                                        <input type="radio" name="rdWebReqProxyType" id="rdWebReqProxyTypeNone" value="None" checked>
+                                                                        No Proxy (default)
+                                                                    </label>
+                                                                </div>
+                                                                <div class="radio">
+                                                                    <label>
+                                                                        <input type="radio" name="rdWebReqProxyType" id="rdWebReqProxyTypeHttp" value="Http">
+                                                                        HTTP Proxy
+                                                                    </label>
+                                                                </div>
+                                                                <div class="radio">
+                                                                    <label>
+                                                                        <input type="radio" name="rdWebReqProxyType" id="rdWebReqProxyTypeSocks5" value="Socks5">
+                                                                        SOCKS5 Proxy
+                                                                    </label>
+                                                                </div>
+                                                            </div>
+                                                        </div>
+
+                                                        <div class="form-group">
+                                                            <label for="txtWebReqProxyAddress" class="col-sm-3 control-label">Proxy Server Address</label>
+                                                            <div class="col-sm-6">
+                                                                <input type="text" class="form-control" id="txtWebReqProxyAddress" placeholder="domain name or IP address" maxlength="255">
+                                                            </div>
+                                                        </div>
+
+                                                        <div class="form-group">
+                                                            <label for="txtWebReqProxyPort" class="col-sm-3 control-label">Proxy Server Port</label>
+                                                            <div class="col-sm-6">
+                                                                <input type="number" class="form-control" id="txtWebReqProxyPort" placeholder="port" style="width: 100px;">
+                                                            </div>
+                                                        </div>
+
+                                                        <div class="form-group">
+                                                            <label for="txtWebReqProxyUsername" class="col-sm-3 control-label">Username</label>
+                                                            <div class="col-sm-6">
+                                                                <input type="text" class="form-control" id="txtWebReqProxyUsername" placeholder="username" maxlength="255">
+                                                            </div>
+                                                        </div>
+
+                                                        <div class="form-group">
+                                                            <label for="txtWebReqProxyPassword" class="col-sm-3 control-label">Password</label>
+                                                            <div class="col-sm-6">
+                                                                <input type="password" class="form-control" id="txtWebReqProxyPassword" placeholder="password" maxlength="255">
+                                                            </div>
+                                                        </div>
+
+                                                        <div class="form-group">
+                                                            <label for="txtWebReqProxyBypassList" class="col-sm-3 control-label">Proxy Bypass List</label>
+                                                            <div class="col-sm-6">
+                                                                <textarea id="txtWebReqProxyBypassList" class="form-control" rows="5" spellcheck="false"></textarea>
+                                                            </div>
+                                                            <div class="col-sm-offset-3 col-sm-8" style="padding-top: 5px;">Enter IP addresses, network addresses or domain names to never proxy.</div>
+                                                        </div>
+
+                                                        <div style="margin-top: 10px;">Note! This proxy is used for update check, app store and blocklist updates.</div>
                                                     </div>
 
                                                     <div class="well well-sm form-horizontal">
@@ -6168,4 +6232,4 @@ ns1.example.com ([2001:db8::])
 
     <div id="footer"></div>
 </body>
-</html>
\ No newline at end of file
+</html>
diff --git a/DnsServerCore/www/js/main.js b/DnsServerCore/www/js/main.js
index 48de88d4..f560b816 100644
--- a/DnsServerCore/www/js/main.js
+++ b/DnsServerCore/www/js/main.js
@@ -288,6 +288,24 @@ $(function () {
         }
     });
 
+    $("input[type=radio][name=rdWebReqProxyType]").change(function () {
+        var proxyType = $('input[name=rdWebReqProxyType]:checked').val().toLowerCase();
+        if (proxyType === "none") {
+            $("#txtWebReqProxyAddress").prop("disabled", true);
+            $("#txtWebReqProxyPort").prop("disabled", true);
+            $("#txtWebReqProxyUsername").prop("disabled", true);
+            $("#txtWebReqProxyPassword").prop("disabled", true);
+            $("#txtWebReqProxyBypassList").prop("disabled", true);
+        }
+        else {
+            $("#txtWebReqProxyAddress").prop("disabled", false);
+            $("#txtWebReqProxyPort").prop("disabled", false);
+            $("#txtWebReqProxyUsername").prop("disabled", false);
+            $("#txtWebReqProxyPassword").prop("disabled", false);
+            $("#txtWebReqProxyBypassList").prop("disabled", false);
+        }
+    });
+
     $("input[type=radio][name=rdRecursion]").change(function () {
         var recursion = $('input[name=rdRecursion]:checked').val();
 
@@ -1301,6 +1319,50 @@ function loadDnsSettings(responseJSON) {
         $("#txtProxyBypassList").prop("disabled", false);
     }
 
+    var webReqProxy = responseJSON.response.webReqProxy;
+    if (webReqProxy === null) {
+        $("#rdWebReqProxyTypeNone").prop("checked", true);
+
+        $("#txtWebReqProxyAddress").prop("disabled", true);
+        $("#txtWebReqProxyort").prop("disabled", true);
+        $("#txtWebReqProxyUsername").prop("disabled", true);
+        $("#txtWebReqProxyPassword").prop("disabled", true);
+        $("#txtWebReqProxyBypassList").prop("disabled", true);
+
+        $("#txtWebReqProxyAddress").val("");
+        $("#txtWebReqProxyPort").val("");
+        $("#txtWebReqProxyUsername").val("");
+        $("#txtWebReqProxyPassword").val("");
+        $("#txtWebReqProxyBypassList").val("");
+    }
+    else {
+        switch (webReqProxy.type.toLowerCase()) {
+            case "http":
+                $("#rdWebReqProxyTypeHttp").prop("checked", true);
+                break;
+
+            case "socks5":
+                $("#rdWebReqProxyTypeSocks5").prop("checked", true);
+                break;
+
+            default:
+                $("#rdWebReqProxyTypeNone").prop("checked", true);
+                break;
+        }
+
+        $("#txtWebReqProxyAddress").val(webReqProxy.address);
+        $("#txtWebReqProxyPort").val(webReqProxy.port);
+        $("#txtWebReqProxyUsername").val(webReqProxy.username);
+        $("#txtWebReqProxyPassword").val(webReqProxy.password);
+        $("#txtWebReqProxyBypassList").val(getArrayAsString(webReqProxy.bypass));
+
+        $("#txtWebReqProxyAddress").prop("disabled", false);
+        $("#txtWebReqProxyPort").prop("disabled", false);
+        $("#txtWebReqProxyUsername").prop("disabled", false);
+        $("#txtWebReqProxyPassword").prop("disabled", false);
+        $("#txtWebReqProxyBypassList").prop("disabled", false);
+    }
+
     var forwarders = responseJSON.response.forwarders;
     if (forwarders == null)
         $("#txtForwarders").val("");
@@ -1779,7 +1841,51 @@ function saveDnsSettings() {
         else
             $("#txtProxyBypassList").val(proxyBypass.replace(/,/g, "\n"));
 
-        proxy = "&proxyType=" + proxyType + "&proxyAddress=" + encodeURIComponent(proxyAddress) + "&proxyPort=" + proxyPort + "&proxyUsername=" + encodeURIComponent($("#txtProxyUsername").val()) + "&proxyPassword=" + encodeURIComponent($("#txtProxyPassword").val()) + "&proxyBypass=" + encodeURIComponent(proxyBypass);
+        proxy =
+            "&proxyType=" + proxyType +
+            "&proxyAddress=" + encodeURIComponent(proxyAddress) +
+            "&proxyPort=" + proxyPort +
+            "&proxyUsername=" + encodeURIComponent($("#txtProxyUsername").val()) +
+            "&proxyPassword=" + encodeURIComponent($("#txtProxyPassword").val()) +
+            "&proxyBypass=" + encodeURIComponent(proxyBypass);
+    }
+
+    var webReqProxy;
+    var webReqProxyType = $('input[name=rdWebReqProxyType]:checked').val().toLowerCase();
+    if (webReqProxyType === "none") {
+        webReqProxy = "&webReqProxyType=" + webReqProxyType;
+    }
+    else {
+        var webReqProxyAddress = $("#txtWebReqProxyAddress").val();
+
+        if ((webReqProxyAddress === null) || (webReqProxyAddress === "")) {
+            showAlert("warning", "Missing!", "Please enter proxy server address.");
+            $("#txtWebReqProxyAddress").focus();
+            return;
+        }
+
+        var webReqProxyPort = $("#txtWebReqProxyPort").val();
+
+        if ((webReqProxyPort === null) || (webReqProxyPort === "")) {
+            showAlert("warning", "Missing!", "Please enter proxy server port.");
+            $("#txtWebReqProxyPort").focus();
+            return;
+        }
+
+        var webReqProxyBypass = cleanTextList($("#txtWebReqProxyBypassList").val());
+
+        if ((webReqProxyBypass.length === 0) || (webReqProxyBypass === ","))
+            webReqProxyBypass = "";
+        else
+            $("#txtWebReqProxyBypassList").val(webReqProxyBypass.replace(/,/g, "\n"));
+
+        webReqProxy =
+            "&webReqProxyType=" + webReqProxyType +
+            "&webReqProxyAddress=" + encodeURIComponent(webReqProxyAddress) +
+            "&webReqProxyPort=" + webReqProxyPort +
+            "&webReqProxyUsername=" + encodeURIComponent($("#txtWebReqProxyUsername").val()) +
+            "&webReqProxyPassword=" + encodeURIComponent($("#txtWebReqProxyPassword").val()) +
+            "&webReqProxyBypass=" + encodeURIComponent(webReqProxyBypass);
     }
 
     var forwarders = cleanTextList($("#txtForwarders").val());
@@ -1842,7 +1948,7 @@ function saveDnsSettings() {
             + "&recursion=" + recursion + "&recursionNetworkACL=" + encodeURIComponent(recursionNetworkACL) + "&randomizeName=" + randomizeName + "&qnameMinimization=" + qnameMinimization + "&nsRevalidation=" + nsRevalidation + "&resolverRetries=" + resolverRetries + "&resolverTimeout=" + resolverTimeout + "&resolverConcurrency=" + resolverConcurrency + "&resolverMaxStackCount=" + resolverMaxStackCount
             + "&saveCache=" + saveCache + "&serveStale=" + serveStale + "&serveStaleTtl=" + serveStaleTtl + "&serveStaleAnswerTtl=" + serveStaleAnswerTtl + "&serveStaleResetTtl=" + serveStaleResetTtl + "&serveStaleMaxWaitTime=" + serveStaleMaxWaitTime + "&cacheMaximumEntries=" + cacheMaximumEntries + "&cacheMinimumRecordTtl=" + cacheMinimumRecordTtl + "&cacheMaximumRecordTtl=" + cacheMaximumRecordTtl + "&cacheNegativeRecordTtl=" + cacheNegativeRecordTtl + "&cacheFailureRecordTtl=" + cacheFailureRecordTtl + "&cachePrefetchEligibility=" + cachePrefetchEligibility + "&cachePrefetchTrigger=" + cachePrefetchTrigger + "&cachePrefetchSampleIntervalInMinutes=" + cachePrefetchSampleIntervalInMinutes + "&cachePrefetchSampleEligibilityHitsPerHour=" + cachePrefetchSampleEligibilityHitsPerHour
             + "&enableBlocking=" + enableBlocking + "&allowTxtBlockingReport=" + allowTxtBlockingReport + "&blockingBypassList=" + encodeURIComponent(blockingBypassList) + "&blockingType=" + blockingType + "&customBlockingAddresses=" + encodeURIComponent(customBlockingAddresses) + "&blockingAnswerTtl=" + blockingAnswerTtl + "&blockListUrls=" + encodeURIComponent(blockListUrls) + "&blockListUpdateIntervalHours=" + blockListUpdateIntervalHours
-            + proxy + "&forwarders=" + encodeURIComponent(forwarders) + "&forwarderProtocol=" + forwarderProtocol + "&concurrentForwarding=" + concurrentForwarding + "&forwarderRetries=" + forwarderRetries + "&forwarderTimeout=" + forwarderTimeout + "&forwarderConcurrency=" + forwarderConcurrency
+            + proxy + webReqProxy + "&forwarders=" + encodeURIComponent(forwarders) + "&forwarderProtocol=" + forwarderProtocol + "&concurrentForwarding=" + concurrentForwarding + "&forwarderRetries=" + forwarderRetries + "&forwarderTimeout=" + forwarderTimeout + "&forwarderConcurrency=" + forwarderConcurrency
             + "&enableLogging=" + enableLogging + "&ignoreResolverLogs=" + ignoreResolverLogs + "&logQueries=" + logQueries + "&useLocalTime=" + useLocalTime + "&logFolder=" + encodeURIComponent(logFolder) + "&maxLogFileDays=" + maxLogFileDays + "&enableInMemoryStats=" + enableInMemoryStats + "&maxStatFileDays=" + maxStatFileDays,
         processData: false,
         showInnerError: true,
