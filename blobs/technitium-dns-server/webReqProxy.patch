diff --git a/DnsServerCore/Dns/Applications/DnsServerInternal.cs b/DnsServerCore/Dns/Applications/DnsServerInternal.cs
index dd6f5682..dc0da11b 100644
--- a/DnsServerCore/Dns/Applications/DnsServerInternal.cs
+++ b/DnsServerCore/Dns/Applications/DnsServerInternal.cs
@@ -107,6 +107,9 @@ namespace DnsServerCore.Dns.Applications
         public NetProxy Proxy
         { get { return _dnsServer.Proxy; } }
 
+        public NetProxy WebReqProxy
+        { get { return _dnsServer.WebReqProxy; } }
+
         public bool PreferIPv6
         { get { return _dnsServer.PreferIPv6; } }
 
diff --git a/DnsServerCore/Dns/DnsServer.cs b/DnsServerCore/Dns/DnsServer.cs
index f1298c7e..2001d6f1 100644
--- a/DnsServerCore/Dns/DnsServer.cs
+++ b/DnsServerCore/Dns/DnsServer.cs
@@ -207,6 +207,7 @@ namespace DnsServerCore.Dns
         IReadOnlyCollection<DnsAAAARecordData> _customBlockingAAAARecords = Array.Empty<DnsAAAARecordData>();
 
         NetProxy _proxy;
+        NetProxy _webReqProxy = NetProxy.CreateProxy(NetProxyType.Http, "10.85.20.10", 3128, null);
         IReadOnlyList<NameServerAddress> _forwarders;
         bool _concurrentForwarding = true;
         int _forwarderRetries = 3;
@@ -6118,6 +6119,12 @@ namespace DnsServerCore.Dns
             set { _proxy = value; }
         }
 
+        public NetProxy WebReqProxy
+        {
+            get { return _webReqProxy; }
+            set { _webReqProxy = value; }
+        }
+
         public IReadOnlyList<NameServerAddress> Forwarders
         {
             get { return _forwarders; }
diff --git a/DnsServerCore/Dns/ZoneManagers/BlockListZoneManager.cs b/DnsServerCore/Dns/ZoneManagers/BlockListZoneManager.cs
index 234eb8ca..df59f8cf 100644
--- a/DnsServerCore/Dns/ZoneManagers/BlockListZoneManager.cs
+++ b/DnsServerCore/Dns/ZoneManagers/BlockListZoneManager.cs
@@ -415,8 +415,8 @@ namespace DnsServerCore.Dns.ZoneManagers
                     else
                     {
                         SocketsHttpHandler handler = new SocketsHttpHandler();
-                        handler.Proxy = _dnsServer.Proxy;
-                        handler.UseProxy = _dnsServer.Proxy is not null;
+                        handler.Proxy = _dnsServer.WebReqProxy;
+                        handler.UseProxy = _dnsServer.WebReqProxy is not null;
                         handler.AutomaticDecompression = DecompressionMethods.All;
 
                         using (HttpClient http = new HttpClient(new HttpClientNetworkHandler(handler, _dnsServer.PreferIPv6 ? HttpClientNetworkType.PreferIPv6 : HttpClientNetworkType.Default, _dnsServer)))
diff --git a/DnsServerCore/WebServiceApi.cs b/DnsServerCore/WebServiceApi.cs
index 306e4db5..1e35800f 100644
--- a/DnsServerCore/WebServiceApi.cs
+++ b/DnsServerCore/WebServiceApi.cs
@@ -73,8 +73,8 @@ namespace DnsServerCore
                 if ((_checkForUpdateJsonData is null) || (DateTime.UtcNow > _checkForUpdateJsonDataUpdatedOn.AddSeconds(CHECK_FOR_UPDATE_JSON_DATA_CACHE_TIME_SECONDS)))
                 {
                     SocketsHttpHandler handler = new SocketsHttpHandler();
-                    handler.Proxy = _dnsWebService._dnsServer.Proxy;
-                    handler.UseProxy = _dnsWebService._dnsServer.Proxy is not null;
+                    handler.Proxy = _dnsWebService._dnsServer.WebReqProxy;
+                    handler.UseProxy = _dnsWebService._dnsServer.WebReqProxy is not null;
                     handler.AutomaticDecompression = DecompressionMethods.All;
 
                     using (HttpClient http = new HttpClient(new HttpClientNetworkHandler(handler, _dnsWebService._dnsServer.PreferIPv6 ? HttpClientNetworkType.PreferIPv6 : HttpClientNetworkType.Default, _dnsWebService._dnsServer)))
diff --git a/DnsServerCore/WebServiceAppsApi.cs b/DnsServerCore/WebServiceAppsApi.cs
index 4ab6a2a5..2506a72d 100644
--- a/DnsServerCore/WebServiceAppsApi.cs
+++ b/DnsServerCore/WebServiceAppsApi.cs
@@ -170,8 +170,8 @@ namespace DnsServerCore
                 if ((_storeAppsJsonData is null) || (DateTime.UtcNow > _storeAppsJsonDataUpdatedOn.AddSeconds(STORE_APPS_JSON_DATA_CACHE_TIME_SECONDS)))
                 {
                     SocketsHttpHandler handler = new SocketsHttpHandler();
-                    handler.Proxy = _dnsWebService._dnsServer.Proxy;
-                    handler.UseProxy = _dnsWebService._dnsServer.Proxy is not null;
+                    handler.Proxy = _dnsWebService._dnsServer.WebReqProxy;
+                    handler.UseProxy = _dnsWebService._dnsServer.WebReqProxy is not null;
                     handler.AutomaticDecompression = DecompressionMethods.All;
 
                     HttpClientNetworkHandler networkHandler = new HttpClientNetworkHandler(handler, _dnsWebService._dnsServer.PreferIPv6 ? HttpClientNetworkType.PreferIPv6 : HttpClientNetworkType.Default, _dnsWebService._dnsServer);
@@ -198,8 +198,8 @@ namespace DnsServerCore
                     {
                         //download to temp file
                         SocketsHttpHandler handler = new SocketsHttpHandler();
-                        handler.Proxy = _dnsWebService._dnsServer.Proxy;
-                        handler.UseProxy = _dnsWebService._dnsServer.Proxy is not null;
+                        handler.Proxy = _dnsWebService._dnsServer.WebReqProxy;
+                        handler.UseProxy = _dnsWebService._dnsServer.WebReqProxy is not null;
                         handler.AutomaticDecompression = DecompressionMethods.All;
 
                         HttpClientNetworkHandler networkHandler = new HttpClientNetworkHandler(handler, _dnsWebService._dnsServer.PreferIPv6 ? HttpClientNetworkType.PreferIPv6 : HttpClientNetworkType.Default, _dnsWebService._dnsServer);
@@ -480,8 +480,8 @@ namespace DnsServerCore
                     {
                         //download to temp file
                         SocketsHttpHandler handler = new SocketsHttpHandler();
-                        handler.Proxy = _dnsWebService._dnsServer.Proxy;
-                        handler.UseProxy = _dnsWebService._dnsServer.Proxy is not null;
+                        handler.Proxy = _dnsWebService._dnsServer.WebReqProxy;
+                        handler.UseProxy = _dnsWebService._dnsServer.WebReqProxy is not null;
                         handler.AutomaticDecompression = DecompressionMethods.All;
 
                         using (HttpClient http = new HttpClient(new HttpClientNetworkHandler(handler, _dnsWebService._dnsServer.PreferIPv6 ? HttpClientNetworkType.PreferIPv6 : HttpClientNetworkType.Default, _dnsWebService._dnsServer)))
